if (get().forward) {
  l -= 0.1;
  translate.z -= l;
}
if (get().back) {
  l += 0.1;
  translate.z += l;
}

rot.setFromAxisAngle(new Vector3(0, 1, 0), ang);
translate.set(0, 0, l);

if (get().left) {
  ang += 0.1;
}
if (get().right) {
  ang -= 0.1;
}
rbRef.current.setNextKinematicRotation(rot);

translate.applyQuaternion(rot);

rbRef.current.setNextKinematicTranslation(translate);

//rotation
HERE: fixedPos.set(0, 1, 0);

rbRef.current.setRotation(
  quaternion.setFromAxisAngle(fixedPos, clock.elapsedTime),
  true
);

fixedPos.z = Math.sin(clock.elapsedTime * 3);

fixedPos.applyQuaternion(quaternion);

//Movement

// fixedPos.set(0, 0, Math.sin(clock.elapsedTime));

rbRef.current.setTranslation(fixedPos, true);

{
  /* <Text3D
          font={"fonts/Ultra_Regular.json"}
          bevelEnabled
          size={0.5}
          curveSegments={12}
        >
          Hello
        </Text3D> */
}
{
  /* <Gltf src="/3Dassets/s_L.glb" /> */
}
